/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 

 instruction[16] for a C-instruction
 12    11 10 9  8  7  6  5     4     3     2   1   0
 compM zx nx zy ny f  no destA destD destM j<0 j=0 j>0
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction type from op-code
    Not(in=instruction[15], out=Ains); // is A-instruction
    Not(in=Ains, out=Cins); // is C-instruction (suboptimal but readable replacement for instruction[15])

    // ARegister = (A-instruction || C-instruction with A in dest) ? instruction : ALUout
    Or(a=Ains, b=instruction[5], out=loadA);
    Mux16(a=ALUout, b=instruction, sel=Ains, out=Ain);
    ARegister(in=Ain, load=loadA, out=A, out[0..14]=addressM);

    // DRegister = D in dest ? D : ALUout
    And(a=Cins, b=instruction[4], out=DinDest);
    DRegister(in=ALUout, load=DinDest, out=D);

    // ALU-input-y = M in comp ? M : A
    And(a=Cins, b=instruction[12], out=MinComp);
    Mux16(a=A, b=inM, sel=MinComp, out=MorA);
    // C-instruction && M in comp && write to M
    And(a=Cins, b=instruction[3], out=writeM);
    
    // ALU inputs: D, M/A, comp1..comp6
    ALU(x=D, y=MorA, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng); // replace ALUout with outM ?

    And(a=ng, b=instruction[2], out=JLT); // JLT
    And(a=zr, b=instruction[1], out=JEQ); // JEQ
    // JGT
    Or(a=zr, b=ng, out=zrORng);
    Not(in=zrORng, out=pos);
    And(a=pos, b=instruction[0], out=JGT);
    // Jump condition met = JLT || JEQ || JGT
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=jumpConditionMet);
    // PCload = C-instruction && jump condition met
    And(a=Cins, b=jumpConditionMet, out=PCload);
    // PC = reset || (PCload && A) || PC++
    PC(in=A, load=PCload, inc=true, reset=reset , out[0..14]=pc);
}